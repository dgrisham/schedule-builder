module Types.Todo where

-- Imports
-- =======

import Data.Char (toUpper)

-- Local
-- -----

import Types.Schedule (ScheduledTask (..))

-- Types
-- =====

data TodoList a = TodoList Title [a]
type Title = String

type Coursework = TodoList Assignment
data Assignment = Assignment { course      :: Course
                             , hwType      :: HwType
                             , description :: Description
                             , dueDate     :: Date
                             , status      :: Status
                             }

type Course = String
--data Course = Course Department CourseNum
--type Department = String
--type CourseNum = Int

data HwType = Homework | Project

type Description = String

data Date = Date Month Day
type Month = String
type Day = String

data Status = Active | Inactive

--data MealPrep = MealPrep MealType Food

--data MealType = Breakfast | Lunch | Dinner
--type Food = String

--data Break = Break Activity

-- Instance declarations
-- ---------------------

-- ### Scheduleable

class Show a => Scheduleable a where
    scheduleTask :: a -> ScheduledTask

instance Scheduleable Assignment where
    scheduleTask (Assignment course hwType title _ _) =
        Filled $ (show course) ++ ": " ++ (show hwType) ++ " " ++ (show title)

--instance Scheduleable MealPrep where
    --scheduleTask (MealPrep mealType food) =
    --    Filled $ (show mealType) ++ " Prep: " ++ (show food)

--instance Scheduleable Break where
    --scheduleTask (Break activity) =
        -- Filled $ "Break: " ++ (show activity)

-- ### Show

instance Show a => Show (TodoList a) where
    show (TodoList title tasks) =
        showHeader title '-'
     ++ "\n\n"
     ++ showTasks tasks ++ "\n"

instance Show Assignment where
    show (Assignment _ hwType title dueDate status) =
        show hwType ++ " " ++ show title
     ++ "(" ++ show dueDate ++ ")"

--instance Show MealPrep where

--instance Show Break where

--instance Show Course where
--    show (Course dept courseNum) =
--        toUpper' (show dept) ++ "-" ++ (show courseNum)

instance Show HwType where
    show Homework = "Homework"
    show Project  = "Project"

instance Show Date where
    show (Date month day) =
        (show month) ++ "/" ++ (show day)

instance Show Status where
    show Active   = "Active"
    show Inactive = "Inactive"

-- Helper functions
-- ----------------

showHeader :: String -> Char -> String
showHeader header underline =
    show header ++ "\n"
 ++ (take (length header) $ repeat underline)

showTasks :: Show a => [a] -> String
showTasks = unlines . map (("-   " ++) . show)

toUpper' :: String -> String
toUpper' = map toUpper

