module Parser.Todo where

-- Imports
-- =======

import Text.Megaparsec
import Text.Megaparsec.String

-- Local
-- -----

import Types.Todo


-- Parser
-- ======

--p_todoLists :: Scheduleable a => Parser [(TodoList a)]
--p_todoLists = many p_todoList
--
--p_todoList :: Parser (TodoList a)
--p_todoList = p_coursework

p_todoLists :: Parser [Coursework]
p_todoLists = many p_coursework

p_coursework :: Parser Coursework
p_coursework = do
    hwType      <- p_hwType
    assignments <- p_assignments hwType
    return $ TodoList (show hwType) assignments

p_hwType :: Parser HwType
p_hwType =  (string "assignments" *> return Homework)
        <|> (string "projects"    *> return Project)

p_assignments :: HwType -> Parser [Assignment]
p_assignments hwType = concat <$> many (p_assignmentSet hwType)

p_assignmentSet :: HwType -> Parser [Assignment]
p_assignmentSet hwType = do
    course <- p_course
    assignments <- many (p_assignment course hwType) <* newline
    return assignments

p_course :: Parser Course
p_course = p_header '-'

p_assignment :: Course -> HwType -> Parser Assignment
p_assignment course hwType = do
    description <- p_description
    dueDate <- p_dueDate
    status <- p_status
    return $ Assignment course hwType description dueDate status

p_description :: Parser Description
p_description = p_listItem 0 (manyTill anyChar newline) <* newline

p_dueDate :: Parser Date
p_dueDate = p_listItem 1 (string "due: " *> p_date) <* newline

p_status :: Parser Status
p_status = p_listItem 1 (string "status: " *> p_status') <* newline

p_status' :: Parser Status
p_status' =  (string "active"   *> return Active)
         <|> (string "inactive" *> return Inactive)

-- Helper functions
-- ----------------

p_header :: Char -> Parser String
p_header underline = some alphaNumChar
                  <* newline
                  <* some (char underline)
                  <* count 2 newline

p_listItem :: Int -> Parser a -> Parser a
p_listItem n p = count n p_tab *> string "-   " *> p

p_tab :: Parser String
p_tab = count 4 p_space

p_space :: Parser Char
p_space = satisfy isSpace

isSpace :: Char -> Bool
isSpace = (== ' ')

p_date :: Parser Date
p_date = do
    month <- digitChar2 <* char '/'
    day   <- digitChar2
    return $ Date month day

digitChar2 :: Parser [Char]
digitChar2 = count 2 digitChar

